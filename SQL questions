### Basics

#### Introduction to MySQL
MySQL is an open-source relational database management system (RDBMS) that uses structured query language (SQL) for database access and management.

#### CRUD Operations

- **Create**
  - **Description:** Used to create a new table or insert new data into a table.
  - **Example:**
    ```sql
    CREATE TABLE users (
      id INT AUTO_INCREMENT,
      name VARCHAR(100),
      email VARCHAR(100),
      PRIMARY KEY (id)
    );
    ```

- **Read**
  - **Description:** Used to retrieve data from a table.
  - **Example:**
    ```sql
    SELECT * FROM users;
    ```

- **Update**
  - **Description:** Used to modify existing records in a table.
  - **Example:**
    ```sql
    UPDATE users
    SET email = 'newemail@example.com'
    WHERE id = 1;
    ```

- **Delete**
  - **Description:** Used to delete records from a table.
  - **Example:**
    ```sql
    DELETE FROM users WHERE id = 1;
    ```

### String Functions

- **CONCAT**
  - **Description:** Concatenates two or more strings.
  - **Example:**
    ```sql
    SELECT CONCAT('Hello', ' World');
    ```

- **CONCAT_WS**
  - **Description:** Concatenates strings with a separator.
  - **Example:**
    ```sql
    SELECT CONCAT_WS(',', 'Hello', 'World');
    ```

- **LENGTH**
  - **Description:** Returns the length of a string.
  - **Example:**
    ```sql
    SELECT LENGTH('Hello World');
    ```

- **SUBSTRING**
  - **Description:** Extracts a substring from a string.
  - **Example:**
    ```sql
    SELECT SUBSTRING('Hello World', 1, 5);
    ```

- **UPPER**
  - **Description:** Converts a string to uppercase.
  - **Example:**
    ```sql
    SELECT UPPER('Hello World');
    ```

- **LOWER**
  - **Description:** Converts a string to lowercase.
  - **Example:**
    ```sql
    SELECT LOWER('Hello World');
    ```

- **REPLACE**
  - **Description:** Replaces all occurrences of a substring within a string.
  - **Example:**
    ```sql
    SELECT REPLACE('Hello World', 'World', 'Everyone');
    ```

### ALTER Table

- **Add Column**
  - **Description:** Adds a new column to a table.
  - **Example:**
    ```sql
    ALTER TABLE users ADD age INT;
    ```

- **Drop Column**
  - **Description:** Deletes a column from a table.
  - **Example:**
    ```sql
    ALTER TABLE users DROP COLUMN age;
    ```

- **Modify Column**
  - **Description:** Changes the data type of a column.
  - **Example:**
    ```sql
    ALTER TABLE users MODIFY COLUMN name VARCHAR(150);
    ```

- **Rename Column**
  - **Description:** Renames a column in a table.
  - **Example:**
    ```sql
    ALTER TABLE users CHANGE COLUMN old_name new_name VARCHAR(100);
    ```

- **Rename Table**
  - **Description:** Renames a table.
  - **Example:**
    ```sql
    ALTER TABLE old_table_name RENAME TO new_table_name;
    ```

### Views

- **Create View**
  - **Description:** Creates a virtual table based on the result set of a SELECT query.
  - **Example:**
    ```sql
    CREATE VIEW user_emails AS
    SELECT name, email FROM users;
    ```

- **Drop View**
  - **Description:** Deletes a view.
  - **Example:**
    ```sql
    DROP VIEW user_emails;
    ```

### Subqueries

- **Description:** A query nested inside another query.
- **Example:**
  ```sql
  SELECT name FROM users
  WHERE id IN (SELECT user_id FROM orders WHERE amount > 100);
  ```

### WHERE Clause

- **Description:** Used to filter records.
- **Example:**
  ```sql
  SELECT * FROM users WHERE age > 25;
  ```

### HAVING Clause

- **Description:** Used to filter records after an aggregation.
- **Example:**
  ```sql
  SELECT age, COUNT(*) FROM users
  GROUP BY age
  HAVING COUNT(*) > 1;
  ```

### IN Operator

- **Description:** Used to specify multiple values in a WHERE clause.
- **Example:**
  ```sql
  SELECT * FROM users WHERE age IN (25, 30, 35);
  ```

### NOT IN Operator

- **Description:** Used to specify multiple values to exclude in a WHERE clause.
- **Example:**
  ```sql
  SELECT * FROM users WHERE age NOT IN (25, 30, 35);
  ```

### BETWEEN Operator

- **Description:** Selects values within a given range.
- **Example:**
  ```sql
  SELECT * FROM users WHERE age BETWEEN 25 AND 30;
  ```

### LIKE Operator

- **Description:** Used to search for a specified pattern in a column.
- **Example:**
  ```sql
  SELECT * FROM users WHERE name LIKE 'A%';
  ```

### DISTINCT Keyword

- **Description:** Used to return only distinct (different) values.
- **Example:**
  ```sql
  SELECT DISTINCT name FROM users;
  ```

### LIMIT Clause

- **Description:** Specifies the number of records to return.
- **Example:**
  ```sql
  SELECT * FROM users LIMIT 5;
  ```

### ORDER BY Clause

- **Description:** Used to sort the result set.
- **Example:**
  ```sql
  SELECT * FROM users ORDER BY name ASC;
  ```

### GROUP BY Clause

- **Description:** Groups rows that have the same values into summary rows.
- **Example:**
  ```sql
  SELECT COUNT(*), age FROM users GROUP BY age;
  ```

### IF Statement

- **Description:** Returns a value based on a condition.
- **Example:**
  ```sql
  SELECT IF(age > 25, 'Older', 'Younger') FROM users;
  ```

### CASE Statement

- **Description:** Similar to IF, but for multiple conditions.
- **Example:**
  ```sql
  SELECT
    CASE
      WHEN age < 20 THEN 'Teenager'
      WHEN age >= 20 AND age < 30 THEN 'Young Adult'
      ELSE 'Adult'
    END AS age_group
  FROM users;
  ```

### Transactions

- **Start Transaction**
  - **Description:** Begins a new transaction.
  - **Example:**
    ```sql
    START TRANSACTION;
    ```

- **Commit**
  - **Description:** Commits the current transaction.
  - **Example:**
    ```sql
    COMMIT;
    ```

- **Rollback**
  - **Description:** Rolls back the current transaction.
  - **Example:**
    ```sql
    ROLLBACK;
    ```

### Stored Procedures

- **Create Procedure**
  - **Description:** Creates a stored procedure.
  - **Example:**
    ```sql
    CREATE PROCEDURE procedure_name()
    BEGIN
      -- SQL statements
    END;
    ```

- **Call Procedure**
  - **Description:** Calls a stored procedure.
  - **Example:**
    ```sql
    CALL procedure_name();
    ```

### Triggers

- **Create Trigger**
  - **Description:** Creates a trigger that is invoked automatically.
  - **Example:**
    ```sql
    CREATE TRIGGER trigger_name
    BEFORE/AFTER INSERT/UPDATE/DELETE
    ON table_name
    FOR EACH ROW
    BEGIN
      -- SQL statements
    END;
    ```

### Optimization

- **Explain**
  - **Description:** Analyzes the execution plan of a query.
  - **Example:**
    ```sql
    EXPLAIN SELECT * FROM users;
    ```

- **Optimize Table**
  - **Description:** Optimizes a table.
  - **Example:**
    ```sql
    OPTIMIZE TABLE users;
    ```

### Backup and Restore

- **Backup Database**
  - **Description:** Backs up a MySQL database.
  - **Example:**
    ```sh
    mysqldump -u username -p database_name > backup_file.sql
    ```

- **Restore Database**
  - **Description:** Restores a MySQL database from a backup file.
  - **Example:**
    ```sh
    mysql -u username -p database_name < backup_file.sql
    ```

### Employee and Department Tables

employee Table -

| id  | name   | salary | dept_id | manager_id |
|-----|--------|--------|---------|------------|
| 1   | Alice  | 90000  | 1       | NULL       |
| 2   | Bob    | 80000  | 2       | 1          |
| 3   | Carol  | 70000  | 1       | 1          |
| 4   | David  | 60000  | 3       | 2          |
| 5   | Eve    | 70000  | 2       | 2          |
| 6   | Frank  | 90000  | 1       | 3          |
| 7   | Grace  | 60000  | 3       | 4          |
| 8   | Heidi  | 75000  | 2       | 5          |
| 9   | Ivan   | 60000  | 3       | 6          |
| 10  | Judy   | 65000  | 3       | 7          |

department Table -

| id  | name         |
|-----|--------------|
| 1   | HR           |
| 2   | Engineering  |
| 3   | Sales        |


Table Creation and Data Copying -

1. Copy table with data:
   
   CREATE TABLE emp SELECT * FROM employee;
   
   [Creates a new table `emp` with the same structure and data as `employee`].

2. Copy table schema:
   
   CREATE TABLE emp AS (SELECT * FROM employee WHERE 1 = 2);
   
   [Creates a new table `emp` with the same structure as `employee` but without any data].


Selecting the Nth Value -

1. Nth value using LIMIT only:
   
   SELECT * FROM employee ORDER BY salary DESC LIMIT n-1, 1;
   
   [Retrieves the nth highest salary record].

2. Nth value using LIMIT and OFFSET:
   
   SELECT * FROM employee ORDER BY salary DESC LIMIT 1 OFFSET n - 1;
   
   [Retrieves the nth highest salary record].


Date Functions -

1. Current date:
   
   SELECT CURRENT_DATE;
   SELECT CURRENT_DATE();
   SELECT DATE(NOW());

   [Retrieves the current date].
   

Joins -

1. Inner join:
   
   SELECT * FROM employee INNER JOIN emp ON employee.id = emp.id;
   
   [Retrieves records that have matching values in both tables].

2. Self join:
   
   SELECT A.id, A.name, B.manager_id, B.name FROM employee A, employee B WHERE A.id = B.manager_id;
   
   [Joins the `employee` table with itself to find relationships like manager-subordinate].

3. Left outer join:
   
   SELECT * FROM employee E LEFT JOIN department D ON E.id = D.id;
   
   [Retrieves all records from the `employee` table and matched records from the `department` table. Unmatched records in the `department` table will have NULL values].

4. Exclusive Left outer join:
   
   SELECT * FROM employee E LEFT JOIN department D ON E.id = D.id WHERE D.id IS NULL;
   
   [Retrieves all records from the employee table that do not have matching records in the department table.].

5. Right outer join:
   
   SELECT * FROM employee E RIGHT JOIN department D ON E.id = D.id;
   
   [Retrieves all records from the `department` table and matched records from the `employee` table. Unmatched records in the `employee` table will have NULL values].


6. Exclusive Right outer join:
   
   SELECT * FROM employee E RIGHT JOIN department D ON E.id = D.id WHERE E.id IS NULL;
   
   [Retrieves all records from the department table that do not have matching records in the employee table.].


7. Full outer join:
   
   SELECT * FROM employee E FULL JOIN department D ON E.id = D.id;
   
   [Retrieves records when there is a match in either table. Unmatched records will have NULL values].


Aggregation and Grouping -

1. Select duplicates:
   
   SELECT name, COUNT(*) FROM employee GROUP BY name HAVING COUNT(name) > 1;
   
   [Finds duplicate names in the `employee` table].

2. Remove duplicates:
   
   DELETE e1 FROM employee e1 INNER JOIN employee e2 WHERE e1.id < e2.id AND e1.name = e2.name;
   
   [Deletes duplicate rows based on the `name` column, keeping the row with the lowest `id`].

3. Select nth record:
   
   SELECT * FROM employee LIMIT n-1, 1;
   
   [Retrieves the nth record from the `employee` table].

4. Non-duplicated data:
   
   SELECT DISTINCT dept_id FROM employee;
   SELECT dept_id FROM employee GROUP BY dept_id;
   SELECT dept_id FROM employee UNION SELECT dept_id FROM employee;
   
   [Retrieves unique department IDs from the `employee` table].

5. Department and max salary:
   
   SELECT dept_id, MAX(Salary) FROM employee GROUP BY dept_id;
   SELECT dept_id, MAX(Salary) FROM employee e RIGHT JOIN department d ON (e.dept_id = d.id) GROUP BY dept_id;
   SELECT dept_id, MAX(Salary) FROM employee e LEFT JOIN department d ON (d.id = e.dept_id) GROUP BY dept_id;
   
   [Finds the maximum salary for each department].

6. Department and employee count:
   
   SELECT dept_id, COUNT(dept_id) AS count FROM employee GROUP BY dept_id ORDER BY COUNT(dept_id);
   
   [Counts the number of employees in each department and orders the results by count].

Data Type Modification

1. Change data type using ALTER:
   
   ALTER TABLE employee MODIFY dept_id BIGINT;
   
   [Changes the data type of `dept_id` in the `employee` table to `BIGINT`].

2. Update data using UPDATE:

   UPDATE employee SET manager_id = 2 WHERE id = 1;

   [Update the data of employee table to new set value].

ACID Properties 

1. Atomicity:
   Ensures that a series of database operations either all occur, or none occur.

2. Consistency:
   Ensures that a transaction brings the database from one valid state to another.

3. Isolation:
   Ensures that transactions occur independently without interference.

4. Durability:
   Guarantees that once a transaction is committed, it will remain so, even in the event of a system failure.
